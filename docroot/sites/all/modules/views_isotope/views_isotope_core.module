<?php
// $id:

define('ISOTOPE_CDN_PATH', 'http://cdnjs.cloudflare.com/ajax/libs/jquery.isotope/2.0.0/isotope.pkgd.min.js');
define('ISOTOPE_FILENAME', 'isotope.pkgd.min.js');

/**
 * Implements hook_permission().
 */
function views_isotope_core_permission() {
  return array(
    'administer isotope' => array(
      'title' => t('Administer Isotope Configuration'),
      'description' => t('Set configuration options for Isotope'),
    ),
  );
}

/**
 * Implementation of hook_ctools_plugin_api().
 *
 * Tell CTools that we support the default_views_isotope_preset API.
 */
function views_isotope_core_ctools_plugin_api($owner, $api) {
  if ($owner == 'views_isotope' && $api == 'default_isotope_configurations') {
    return array('version' => 1);
  }
}
/**
 * Implementation of hook_default_views_isotope_preset().
 *
 * Provide a couple of default presets.
 */
function views_isotope_core_default_isotope_configuration() {
  $export = array();
  $config = new stdClass;
  $config->api_version = 1;
  $config->name = 'isotope_default_config';
  $config->admin_title = 'Default config';
  $config->layoutMode = 'masonry';
  $config->transitionDuration = NULL;
  $config->isFitWidth = NULL;
  $config->isHorizontal = NULL;
  $config->stamp = NULL;
  $config->horizontalAlignment = NULL;
  $config->verticalAlignment = NULL;

  // If imagesLoaded is available, add it by default.
  if(views_isotope_core_check_additional_libraries('imagesLoaded')){
    $config->plugins = array('imagesLoaded');
  } else {
    $config->plugins = array();
  }

  $export['isotope_default_config'] = $config;
  return $export;
}

/**
 * Implementation of hook_ctools_plugin_directory().
 */
function views_isotope_core_ctools_plugin_directory($module, $type) {
  // Load the export_ui plugin.
  if ($type =='export_ui') {
    return 'plugins/export_ui';
  }
}

/**
 * Convert the name of a config into a JSON representation as per http://isotope.metafizzy.co/#initialize-in-html
 */
function views_isotope_core_get_config_JSON($config, array $additional_attributes){
  ctools_include('export');
  $plugin = ctools_export_crud_load('isotope_configurations', $config);
  $allowed_attributes = array('layoutMode', 'transitionDuration', 'isFitWidth', 'isHorizontal', 'stamp', 'horizontalAlignment', 'verticalAlignment');
  $attributes = array('columnWidth' => 200, 'itemSelector' => '.isotope-element') + $additional_attributes;
  foreach($plugin as $key => $value){
    if(in_array($key, $allowed_attributes)){
      $attributes[$key] = $value;
    }
  }
  return drupal_json_encode($attributes);
}

/**
 * Implements hook_requirements().
 */
function views_isotope_core_requirements($phase) {
  $requirements = array();
  if ($phase == "runtime") {
    $requirements['isotope'] = array(
      'title' => t('Isotope library'),
      'value' => t('Enabled'),
    );

    $isotope_scope = views_isotope_core_check_library();

    // If Libraries API is enabled but the .js is not found within the sites/all/libraries folder
    // report a warning. The module will fall back to its included copy so this isn't a showstopper.
    if (function_exists('libraries_get_path') && $isotope_scope == 'cdn') {
      $requirements['isotope']['value'] = t('Isotope is not correctly using Libraries API');
      $requirements['isotope']['severity'] = REQUIREMENT_WARNING;
      $requirements['isotope']['description'] = t('Please install <a href="http://isotope.metafizzy.co/">Isotope</a> in <strong>'. libraries_get_path('isotope') . '/' . ISOTOPE_FILENAME .'</strong>. The module is using an external copy from ' . ISOTOPE_CDN_PATH);
    }
    // If the external copy has been removed or renamed report an error.
    // At this point the module cannot function properly.
    if ($isotope_scope == FALSE) {
      $requirements['isotope']['value'] = t('Isotope is not correctly installed');
      $requirements['isotope']['severity'] = REQUIREMENT_ERROR;
      $requirements['isotope']['description'] = t('The external script is not available.  Please enable the Libraries API module AND install <a href="http://isotope.metafizzy.co/">Isotope</a> in the isotope directory in libraries (sites/all/libraries/isotope/' . ISOTOPE_FILENAME . ').');
    }
  }
  return $requirements;
}

/**
 * Check for the library and return the appropriate scope.
 */
function views_isotope_core_check_library(){
    //@TODO: Cache the result
    if (function_exists('libraries_get_path') && file_exists(libraries_get_path('isotope') . '/' . ISOTOPE_FILENAME) === TRUE) {
        //Library has been installed correctly, so use it.
        return 'library';
    }
    if (views_isotope_core_check_url(ISOTOPE_CDN_PATH)) {
        //Library has not been installed correctly, but the cdn file is available.
        return 'cdn';
    }
    //Neither option is available. Throw an error.
    return FALSE;
}

/**
 * Check for all additional libraries and return the ones that have been detected, or an empty array.
 * If passed a specific libname to check for, will return true or false
 */
function views_isotope_core_check_additional_libraries($libname = FALSE){
  $detected_libraries = array();

  $libraries = array(
    'cellsByRow' => 'cells-by-row.js',
    'packery' => 'packery-mode.pkgd.min.js',
    'masonryHorizontal' => 'masonry-horizontal.js',
    'fitColumns' => 'fit-columns.js',
    'cellsByColumn' => 'cells-by-column.js',
    'horizontal' => 'horizontal.js',
    'imagesLoaded' => 'imagesloaded.pkgd.min.js',
    'infinite-scroll' => 'jquery.infinitescroll.js',
    'jquery-bbq' => 'jquery.ba-bbq.min.js',
  );

  if (function_exists('libraries_get_path')) {
    foreach($libraries as $lib_name => $lib_filename){
      if (file_exists(libraries_get_path('isotope') . '/' . $lib_filename) === TRUE || file_exists(libraries_get_path($lib_name) . '/' . $lib_filename) === TRUE) {
        //checks both for files inside the "isotope" folder and files inside a plugin-named folder
        $detected_libraries[$lib_filename] = $lib_name;
      }
    }
  }

  if($libname && in_array($libname, $detected_libraries)){
    return TRUE;
  } elseif($libname) {
    return FALSE;
  }

  return $detected_libraries;
}

/**
 * Function to add the right version of the js file
 */
function views_isotope_core_addjs(){
  $isotope_scope = views_isotope_core_check_library();
  if ($isotope_scope == 'library') {
    drupal_add_js(libraries_get_path('isotope') . '/' . ISOTOPE_FILENAME);
  }
  else if ($isotope_scope == 'cdn') {
    drupal_add_js(ISOTOPE_CDN_PATH, 'external');
  }
}

/**
 * Helper function to check if a url exists
 */
function views_isotope_core_check_url($url){
    $header_response = get_headers($url, 1);
    if ( strpos( $header_response[0], "200" ) === FALSE ){
      return FALSE;
    }
    return TRUE;
}


/**
 * Implements hook_theme().
 *
 * Defines the theming capabilities provided by this module.
 */
function views_isotope_core_theme($existing, $type, $theme, $path) {
  return array(
    'isotope_grid' => array(
      'variables' => array(
        'config' => 'isotope_default_config',
        'items' => array(),
        'instance' => NULL,
      ),
    ),
    'isotope_filter' => array(
      'variables' => array(
        'items' => array(),
        'instance' => NULL,//Should apply to all instances on the page, unless restricted to one or more
        'filtername' => 'filter',
        'filtertitle' => NULL,
      ),
    ),
    'isotope_sorter' => array(
      'variables' => array(
        'sorts' => array(),
        'original' => NULL,
        'instance' => NULL,//Should apply to all instances on the page, unless restricted to one or more
      ),
    ),
  );
}

function theme_isotope_grid($vars){

  //Add the sorting options to the initial configuration
  $additional_config = array('getSortData' => array());
  foreach($vars['items'] as $item){
    foreach($item['data'] as $key => $value){
      $additional_config['getSortData'][$key] = '.'.$key;
    }
  }

  //Retrieve the desired configuration (plus sorting options)
  $config = views_isotope_core_get_config_JSON($vars['config'], $additional_config);

  //Make sure the instance name is unique per page load.
  $global_instances = &drupal_static(__FUNCTION__);
  $global_instances = isset($global_instances) ? $global_instances : array();
  if(!empty($vars['instance']) && !in_array($vars['instance'], $global_instances)){
    $instance_name = $vars['instance'];
  } else {
    for ($i=0; $i >= 0; $i++) {
      if(!in_array($i, $global_instances)){
        $instance_name = $i;
        break; // Break the infinite loop when successful
      }
    }
  }
  $global_instances[] = $instance_name;
  $instance = 'isotope-instance-'.$instance_name;

  //Output the markup
  $markup = '<div class="isotope-container js-isotope" id="'.$instance.'" data-isotope-options=\''.$config.'\'>';
  foreach($vars['items'] as $item){
    $markup .= '<div class="isotope-element '.implode(' ', $item['data']).'">';
    $markup .= $item['value'];
    foreach($item['data'] as $key => $value){
      $markup .= '<div class="sort-data '.$key.'">'.$value.'</div>';
    }
    $markup .= '</div>';
  }
  $markup .= '</div>';

  $return = array(
    '#markup' => $markup,
    '#attached' => array(
      'js' => array(drupal_get_path('module', 'views_isotope_core') . '/views_isotope.js')
      ),
    );

  views_isotope_core_addjs();
  return drupal_render($return);
}

function theme_isotope_filter($vars){
  $return = '<div class="isotope-options">';
  $return .= !empty($vars['filtertitle']) ? '<h2>'.$vars['filtertitle'].'</h2>' : '';

  $instance = !empty($vars['instance']) ? ' data-instance-id="isotope-instance-'.$vars['instance'].'"' : '';
  $group = !empty($vars['filtername']) ? ' data-filter-group="'.$vars['filtername'].'"' : '';
  $return .= '<ul class="option-set"'.$group.$instance.'>';

  $return .= '<li><a class="filterbutton" data-filter="" href="#filter">'.t('All').'</a></li>';
  foreach($vars['items'] as $key => $label){
    $return .= '<li><a class="filterbutton" data-filter=".'.$key.'" href="#filter">'.$label.'</a></li>';
  }
  $return .= '</ul></div>';
  return $return;
}

function theme_isotope_sorter($vars){
  $return = '<div class="isotope-options">';
  $return .= '<h2>'.t('Sort By').'</h2>';

  $instance = !empty($vars['instance']) ? ' data-instance-id="isotope-instance-'.$vars['instance'].'"' : '';
  $return .= '<ul class="option-set sorts"'.$instance.'>';
  if(!empty($vars['original'])){
    $vars['sorts'] = array($vars['original'] => 'original-order') + $vars['sorts'];
  }
  foreach($vars['sorts'] as $key => $value){
    $sort = is_array($value) ? implode(',', $value) : $value;
    $label = is_numeric($key) ? $sort : $key;
    $return .= '<li><a class="sorterbutton" data-sort-by="'.$sort.'" href="#sorter">'.$label.'</a></li>';
  }
  $return .= '</ul></div>';

  return $return;
}

